{"version":3,"sources":["QRCodeGenerator.tsx","styles.ts","App.tsx","index.tsx"],"names":["QRCodeGenerator","useState","accValue","setAccValue","secValue","setSecValue","combined","setCombined","updateCombined","Typography","Grid","container","spacing","item","xs","md","lg","TextField","fullWidth","value","onChange","event","target","Button","color","variant","onClick","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","title","toolbar","display","alignItems","justifyContent","padding","mixins","content","App","classes","AppBar","Toolbar","IconButton","edge","className","aria-label","rootElement","document","getElementById","render"],"mappings":"8TA+DeA,EA3DS,WAAO,IAAD,EACIC,mBAAS,YADb,mBACrBC,EADqB,KACXC,EADW,OAEIF,mBAAS,YAFb,mBAErBG,EAFqB,KAEXC,EAFW,OAGIJ,mBAAS,IAHb,mBAGrBK,EAHqB,KAGXC,EAHW,KAKtBC,EAAiB,WACrBD,EAAY,6BAAD,OAA8BL,EAA9B,iBAA+CE,KAiB5D,OACE,oCACE,kBAACK,EAAA,EAAD,0BACA,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC7B,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,MAAOjB,EACPkB,SAtBmB,SAACC,GAC5BlB,EAAYkB,EAAMC,OAAOH,OACzBX,QAuBI,kBAACE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC7B,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,MAAOf,EACPgB,SAxBmB,SAACC,GAC5BhB,EAAYgB,EAAMC,OAAOH,OACzBX,QAyBI,kBAACE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC7B,kBAACO,EAAA,EAAD,CACEL,WAAS,EACTM,MAAM,UACNC,QAAQ,YACRC,QA3BkB,WAC1BlB,MAsBM,aASF,kBAACE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC7B,kBAAC,IAAD,CAAQG,MAAOb,Q,iBC9BVqB,EAxBGC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMjB,QAAQ,IAE7BsB,MAAO,CACLH,SAAU,GAEZI,QAAQ,aACNC,QAAS,OACTC,WAAY,SACZC,eAAgB,WAChBC,QAASV,EAAMjB,QAAQ,EAAG,IAEvBiB,EAAMW,OAAOL,SAElBM,QAAS,CACPV,SAAU,EACVQ,QAASV,EAAMjB,QAAQ,Q,MCRZ,SAAS8B,IACtB,IAAMC,EAAUhB,IAEhB,OACE,gCACE,gBAACiB,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CACEC,KAAK,QACLC,UAAWL,EAAQX,WACnBR,MAAM,UACNyB,aAAW,QAEX,gBAAC,IAAD,OAEF,gBAACxC,EAAA,EAAD,CAAYgB,QAAQ,KAAKuB,UAAWL,EAAQT,OAA5C,QAGA,gBAACX,EAAA,EAAD,CAAQC,MAAM,WAAd,WAGJ,wBAAMwB,UAAWL,EAAQF,SACvB,uBAAKO,UAAWL,EAAQR,UACxB,gBAAC,EAAD,QChCR,IAAMe,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,gBAACX,EAAD,MAASQ,K","file":"static/js/main.8e0f02fb.chunk.js","sourcesContent":["import { Button, Grid, TextField, Typography } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport QRCode from \"qrcode.react\";\n\nconst QRCodeGenerator = () => {\n  const [accValue, setAccValue] = useState(\"your acc\");\n  const [secValue, setSecValue] = useState(\"your sec\");\n  const [combined, setCombined] = useState(\"\");\n\n  const updateCombined = () => {\n    setCombined(`autorabit://settings?akey=${accValue}&skey=${secValue}`);\n  };\n\n  const handleAccValueChange = (event: any) => {\n    setAccValue(event.target.value);\n    updateCombined();\n  };\n\n  const handleSecValueChange = (event: any) => {\n    setSecValue(event.target.value);\n    updateCombined();\n  };\n\n  const handleGenerateClick = () => {\n    updateCombined();\n  };\n\n  return (\n    <>\n      <Typography>QR code Generator</Typography>\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={12} lg={12}>\n          <TextField\n            fullWidth\n            value={accValue}\n            onChange={handleAccValueChange}\n          ></TextField>\n        </Grid>\n        <Grid item xs={12} md={12} lg={12}>\n          <TextField\n            fullWidth\n            value={secValue}\n            onChange={handleSecValueChange}\n          ></TextField>\n        </Grid>\n        <Grid item xs={12} md={12} lg={12}>\n          <Button\n            fullWidth\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={handleGenerateClick}\n          >\n            Generate\n          </Button>\n        </Grid>\n        <Grid item xs={12} md={12} lg={12}>\n          <QRCode value={combined} />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default QRCodeGenerator;\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3)\n  }\n}));\n\nexport default useStyles;\n","import {\n  AppBar,\n  Button,\n  IconButton,\n  Toolbar,\n  Typography\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport * as React from \"react\";\nimport \"./QRCodeGenerator\";\nimport QRCodeGenerator from \"./QRCodeGenerator\";\nimport useStyles from \"./styles\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const classes = useStyles();\n\n  return (\n    <>\n      <AppBar>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            News\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <QRCodeGenerator />\n      </main>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}